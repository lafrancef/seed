Node.prototype = new BasicNode();
Node.prototype.constructor = Node;
Node._TRIANGLE_HEIGHT = 30;
Node._TRIANGLE_BORDER_WIDTH = 2;

function Node(opts) {
	this.basicInit(opts.id, opts.theta, opts.caseMarker);
	this._traceId = undefined;
	this._content = opts.showContent;
	this._triangle = opts.showTriangle;
	
	var node = this.createSkeleton(opts.pos);
	
	var content = document.createElement("span");
	if(opts.contents != undefined)
		content.innerHTML = opts.contents;

	var trace = document.createElement("sub");
	trace.className = "trace";
	
	//The SVG element must be created in one go, otherwise it won't render properly
	this._$triangle = $('<svg xmlns="http://www.w3.org/2000/svg" ' +
						'version="1.1" viewbox="0 0 100 100" ' +
						'preserveaspectratio="none">' +
						'<polygon points="0,99 50,0 100,99" ' +
						'style="fill:white; stroke:black; stroke-width:' +
						Node._TRIANGLE_BORDER_WIDTH + ';"/></svg>');
		
	this._$triangle.css("height", Node._TRIANGLE_HEIGHT + "px")
					.css("width", this._EDIT_MIN_WIDTH + "px")
					.css("display", "block")
					.css("margin", "auto");
					
	var container = document.createElement("div");
	container.appendChild(this._$triangle[0]);
	container.appendChild(content);
	container.appendChild(trace);
	node.appendChild(container);
	
	mainCanvas.appendChild(node);
	
	this._$content = $(content);
	this._$trace = $(trace);
	this._$container = $(container);
	
	this.makeEditable(this._$content, this._EMPTY_CONTENT, 140);
	
	this.updateTriangle();
	this.updateTriangleVisual();
	this.updateContentVisual();
	this.move(opts.x, opts.y);
	if(SAVER != undefined)
		SAVER.signalModification(this.id);
}

Node.prototype.simplify = function() {
	var simple = {
		id: this.id,
		pid: this._pid,
		x: parseInt(this._$node.css("left")),
		y: parseInt(this._$node.css("top")),
		"case": this._case,
		theta: this._theta,
		trace_id: this._traceId,
		type: "Node",
		show_content: this._content,
		show_triangle: this._triangle
	}
	
	if(this._$pos[0].innerHTML != this._EMPTY_POS)
		simple["pos"] = this._$pos[0].innerHTML;
		
	if(this._$content[0].innerHTML != this._EMPTY_CONTENT)
		simple["content"] = this._$content[0].innerHTML;
		
	return simple;
}

Node.prototype.isEditing = function() {
	return (this._$pos.is(":editing") || this._$content.is(":editing"))
}

Node.prototype.stopEditing = function() {
	if(this._$pos.is(":editing"))
		this._$pos.editable("close");
		
	if(this._$content.is(":editing"))
		this._$content.editable("close");
}

Node.prototype.toggleContent = function() {
	this._content = !this._content;
	this.updateContentVisual();
	this.signalModification();
}

Node.prototype.updateContentVisual = function() {
	if(this._content)
		this._$container.css("display", "block");
	else
		this._$container.css("display", "none");
		
	this.hasMoved();
}

Node.prototype.toggleTriangle = function() {
	this._triangle = !this._triangle;
	this.updateTriangleVisual();
	this.signalModification();
}

Node.prototype.updateTriangleVisual = function() {
	if(this._triangle)
		this._$triangle.css("display", "block");
	else
		this._$triangle.css("display", "none");
		
	this.hasMoved();
}

Node.prototype.updateTriangle = function() {
	var w = this._$content.outerWidth();
	if(w >= this._EDIT_MIN_WIDTH)
		this._$triangle.css("width", w + "px");
}

Node.prototype.remove = function() {
	if(this._traceId != undefined)
		NODES[this._traceId].traceeRemoved();
	
	BasicNode.prototype.remove.call(this);
}

Node.prototype.spawnChild = function(isTrace) {
	var center = this.getCanvasRelativeCenter();
	var topLeft = this.getTopLeft();
	
	//TODO use actual border width
	var newNode;
	if(isTrace) {
		newNode = new Trace({id: ID_COUNTER, x: 10, y: 10, traceId: Trace.generateId()});
	} else {
		newNode = new Node({id: ID_COUNTER, x: 10, y: 10});
	}
	newNode.setParent(this.id);
	this._chids[newNode.id] = true;
	
	var pos = nonOverlappingPosition(center.x - newNode.getDimensions().x / 2, topLeft.top + 100);
	newNode.move(pos.left, pos.top);

	NODES[ID_COUNTER] = newNode;
	
	ID_COUNTER += 1;
	this.signalModification();
	
	if(this._content)
		this.toggleContent();
	$(mainCanvas).selectable("refresh");
}

Node.prototype.removeChild = function(chid) {
	delete this._chids[chid];
	//Line is taken care of by child
	
	//Show our content if we have no more children
	var count = 0;
	for(chid in this._chids)
		count++;
		
	if(count == 0 && !this._content)
		this.toggleContent();
}

Node.prototype.linkNewChild = function(chid) {
	this._chids[chid] = true;
	NODES[chid].setParent(this.id); //Child signals its modification here
	this.signalModification();
	
	if(this._content)
		this.toggleContent();
}

Node.prototype.linkTrace = function(traceId) {
	this._traceId = traceId;
	this._$trace[0].innerHTML = NODES[traceId].traceId;
	
	this.signalModification();
}

Node.prototype.traceRemoved = function() {
	this._traceId = undefined;
	this._$trace[0].innerHTML = "";
	
	this.signalModification();
}

Trace.prototype = new BasicNode();
Trace.prototype.constructor = Trace;
function Trace(opts) {
	this.basicInit(opts.id, opts.theta, opts.caseMarker);
	this.traceId = opts.traceIdx;
	this._traceeId = undefined;
	
	var node = this.createSkeleton(opts.pos);
	
	var trace = document.createElement("div");
	trace.innerHTML = "<i>t</i><sub>" + this.traceId + "</sub>";
	
	node.appendChild(trace);
	mainCanvas.appendChild(node);
	
	this.move(opts.x, opts.y);
	if(SAVER != undefined)
		SAVER.signalModification(this.id);
}

Trace.generateId = function() {
	
	var maxId = MAX_TRACE_ID.charCodeAt(0);
	var start = "i".charCodeAt(0);
	
	var ids = [];
	allTraces(function(tr) {
		ids[tr.traceId.charCodeAt(0) - start] = true;
	});
	
	for(i = 0 ; i <= (maxId - start) ; i++) {
		if(ids[i] === undefined)
			return String.fromCharCode(i + start);
	}
	
	MAX_TRACE_ID = String.fromCharCode(maxId + 1);
	return MAX_TRACE_ID;
}

Trace.prototype.simplify = function() {
	var simple = {
		id: this.id,
		pid: this._pid,
		x: parseInt(this._$node.css("left")),
		y: parseInt(this._$node.css("top")),
		trace_idx: this.traceId,
		"case": this._case,
		theta: this._theta,
		type: "Trace"
	}
	
	if(this._$pos[0].innerHTML != this._EMPTY_POS)
		simple["pos"] = this._$pos[0].innerHTML;
		
	return simple;
}

Trace.prototype.isEditing = function() {
	return this._$pos.is(":editing");
}

Trace.prototype.stopEditing = function() {
	if(this._$pos.is(":editing"))
		this._$pos.editable("close");
}

Trace.prototype.remove = function() {
	if(this._traceeId != undefined)
		NODES[this._traceeId].traceRemoved();
	
	BasicNode.prototype.remove.call(this);
}

Trace.prototype.linkTracee = function(traceeId) {
	this._traceeId = traceeId;
	
	this.signalModification();
}

Trace.prototype.traceeRemoved = function() {
	this._traceeId = undefined;
}