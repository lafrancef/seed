var NODES = {};
var EDITED; //Currently edited node
var SAVER;
var ID_COUNTER = 0;
var MAX_TRACE_ID = "i";

var KinSTAGE;
var KinLAYER;

var clickedLine = false; //Hack!

function asNode(that) {
	return NODES[$(that).data('id')];
}

//TODO Try to remove magic numbers throughout the code

/* Execute a function on all the nodes in the tree. If func is a function name, a method of Node
will be called, with params. If func is a function, the function will be called with a reference
to each node (stopping if func returns false). If filter is a function, the function is passed
the nodes in turn, and func is called with them only if filter returns true. */
function allNodes(func, params, filter) {
	for(id in NODES) {
		if(typeof filter === 'function') {
			if(!filter(NODES[id])) continue;
		}
	
		var fn = NODES[id][func];
		if(typeof NODES[id][func] === 'function') {
			if(NODES[id][func](params) === false)
				break;
		} else if(typeof func === 'function') {
			if(func(NODES[id]) === false)
				break;
		} else {
			throw new Error('allNodes: first parameter must be either a function or a method of Node');
		}
	}
}

function allSelectedNodes(func, params) {
	allNodes(func, params, function(node) {
		return node.isSelected();
	});
}

function allSelectedLines(func, params) {
	allNodes(func, params, function(node) {
		return node.lineSelected();
	});
}

function allTraces(func, params) {
	allNodes(func, params, function(node) {
		return (node instanceof Trace);
	});
}

function clickLine(e) {
	var possessingNode = NODES[this.id()];
	clickedLine = true;
	
	if (e.evt.shiftKey == false) {
		/* No shift key: 
			- Deselect everything
			- Select this element if it was not selected, or if
			  it was part of a multi-selection
		*/
		
		allSelectedNodes('deselect');
		
		var numSel = 0;
		allSelectedLines(function(node) {
			if(node.lineSelected())
				numSel++;
		});
		
		var wasSelected = possessingNode.lineSelected();
		allSelectedLines('deselectLine');
	
		if (!wasSelected || numSel > 1)
			possessingNode.selectLine();
    } else {
		if (possessingNode.lineSelected())
			possessingNode.deselectLine();
		else
			possessingNode.selectLine();
    }
	
	KinSTAGE.draw();
}

function offsetTo10s(num) {
	var r = num % 10;
	if(r < 5)
		return r; //Round down
	else
		return -10 + r; //Round up
}

var middle = function(n) {
	if(n - Math.floor(n) > 0)
		return n;
	else
		return n + 0.5;
}

$(window).load(function(){
$mainCanvas = $( "#mainCanvas" );
var mainCanvas = document.getElementById("mainCanvas");
var mainCanvasPos = mainCanvas.getBoundingClientRect();

KinSTAGE = new Kinetic.Stage({container: "mainCanvas", height: $(mainCanvas).height() - 10, width: $(mainCanvas).width() - 10, listening: true});
KinLAYER = new Kinetic.Layer({listening: true});
KinSTAGE.add(KinLAYER);

$mainCanvas.selectable({
	/* Require a distance to activate selection. This is because we
	want to override normal clicks. */
	distance: 1,
	filter: '.node', //Only select nodes (i.e. don't select KineticJS elements)
	start: function(e, ui) {
		if(EDITED != undefined)
			EDITED.stopEditing();
	}
}).click(function(e){
	/* If we get here, it means we did not click on a child
	div. Therefore, deselect everything. */		
	if(!e.shiftKey && !clickedLine) {
		allNodes('deselect');
		allSelectedLines("deselectLine");
			
		KinSTAGE.draw();
	}

	clickedLine = false;
	
	if (EDITED != undefined)
		EDITED.stopEditing();
		
}).dblclick(function(e) {

	var x = e.pageX - mainCanvasPos.left;
	var y = e.pageY - mainCanvasPos.top;

	NODES[ID_COUNTER] = new Node(ID_COUNTER, x, y);
	ID_COUNTER += 1;
	
	$(mainCanvas).selectable("refresh");
});

$(document.body).keydown(function(e) {
	if (e.keyCode == 46) { //Delete key
		if (EDITED == undefined) {
			allSelectedNodes('remove');
			allSelectedLines('removeLine');
		}
	} else if (e.keyCode == 27) { //Escape key
		allNodes('deselect');
		if (EDITED != undefined)
			EDITED.stopEditing();
	}
});

$("#btnCreateChild").click(function() {
	allSelectedNodes( function(n) { 
		if (n instanceof Node) {
			// Spawn node on first select child only
			n.spawnChild(false);
			return false;
		}
	});
});

$("#btnTrace").click(function() {

	allSelectedNodes( function(n) { 
		if (n instanceof Node) {
			// Spawn node on first select child only
			n.spawnChild(true);
			return false;
		}
	});
});

$("#btnPretty").click(function() {

	allSelectedNodes( function(n) { 
		n.prettify(false);
		n.prettyPosition(true);
		return false;
	});
});

$("#btnSave").click(function() {
	SAVER.saveTree();
});

$("#btnTheta").click(function() {
	allSelectedNodes("toggleTheta");
});

$("#btnCase").click(function() {
	allSelectedNodes("toggleCase");
});

$("#btnContent").click(function() {
	allSelectedNodes(function(n) {
		if(n instanceof Node && n.isLeaf())
			n.toggleContent();
	});
});

$("#btnLink").click(function() {
	var sel1, sel2;
	
	// Pick the first two selected nodes
	allSelectedNodes( function(n) { 
		if(n.isSelected()) {
			if(sel1 == undefined)
				sel1 = n;
			else {
				sel2 = n;
				return false;
			}
		}
	});
	
	//We need two selected
	if(sel1 == undefined || sel2 == undefined)
		return;
	
	//Can't link two traces
	if(sel1 instanceof Trace && sel2 instanceof Trace)
		return;
	
	if(sel1 instanceof Trace) {
		sel1.linkTracee(sel2.id);
		sel2.linkTrace(sel1.id);
		return;
	}
	
	if(sel2 instanceof Trace) {
		sel1.linkTrace(sel2.id);
		sel2.linkTracee(sel1.id);
		return;
	}
		
	if(!sel1.hasParent() && !sel2.hasParent()) {
		//If neither has a parent, the one that's higher in the page will get to be the parent
		if(sel1.getCanvasRelativeCenter().y < sel2.getCanvasRelativeCenter().y)
			sel1.linkNewChild(sel2.id)
		else
			sel2.linkNewChild(sel1.id)
	
	} else if (sel1.hasParent() && sel2.hasParent()) {
		//If both have parents, we can't link them together
		return; //TODO have feedback here
	} else if (sel1.hasParent()) {
		//If only one has a parent, then that one becomes the parent of the other
		//(since the reverse is impossible)
		sel1.linkNewChild(sel2.id)
	} else if (sel2.hasParent()) {
		sel2.linkNewChild(sel1.id)
	}
});

loadTree();
SAVER = new Saver();
$(mainCanvas).selectable("refresh");

});