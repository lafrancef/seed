BasicNode = function() {
	this._EMPTY_POS =  "<i>X</i>";
	this._EMPTY_CONTENT = "<i>Node</i>";
	this._LINE_WIDTH_PX = 1;
	this._LINE_CLICK_WIDTH = 16;
	this._EDIT_MIN_WIDTH = 30;
	this._MIN_NODE_DISTANCE = 10;
	this._NODE_VERTICAL_SPACE = 40;
}

BasicNode.prototype.basicInit = function(id, theta, _case) {
	this._chids = {};
	this._lineToParent = undefined; //Kinetic Line between this node and its parent
	this._lineSelected = false;
	this._pid = undefined;
	this.id = id;
	this._theta = theta != undefined ? theta : false;
	this._case = _case != undefined ? _case : false;
	this._xOffset = 0;
	
	this.dragOffset = {left: 0, top: 0};
}

BasicNode.prototype.createSkeleton = function(posStr) {
	var node = document.createElement('div');
	
	// Temporary position before the node is moved to its final spot
	node.style.top = "10px";
	node.style.left = "10px";
	
	node.className = "node";
	node.style.position = "absolute";
	node.id = "nid_" + this.id;

	var pos = document.createElement('span');
	if(posStr != undefined)
		pos.innerHTML = posStr;

	var theta = document.createElement('span');
	theta.className = "thetaRole";
	
	var caseMarker = document.createElement('span');
	caseMarker.className = "caseMarker";
	
	var container = document.createElement('div');
	container.appendChild(pos);
	container.appendChild(theta);
	container.appendChild(caseMarker);
	
	node.appendChild(container);
	
	this._$node = $(node);
	this._$pos = $(pos);
	this._$theta = $(theta);
	this._$case = $(caseMarker);
	
	var mainCanvas = document.getElementById("mainCanvas");
	var mainCanvasPos = mainCanvas.getBoundingClientRect();
	var me = this;
	this._$node.draggable({
		start: function(e, u) { me.startDragging.call(me, e, u); },
		drag: function(e, u) { return me.drag.call(me, e, u); },
		//Contain inside the canvas, only on the top and left sides (right and bottom are unlimited)
		containment: [mainCanvasPos.left + 3, mainCanvasPos.top + 3, undefined, undefined], //TODO Use real padding
		distance: 5
	}).click(function(e) { me.click.call(me, e); })
	.dblclick(function(e) { e.stopPropagation(); }) //Prevent double-click from reaching main canvas
	.data('id', this.id);
	
	/* 	Hack: modify the position generation of jQuery so that dragging aligns node centers on a 10x10 grid.
		The grid functionality uses a "relative" grid (in increments of x/y from current
		position), which is not what we want. */
	$nodeDrag = this._$node.data("draggable");
	if($nodeDrag.__proto__.oldGeneratePosition === undefined)
		$nodeDrag.__proto__.oldGeneratePosition = $nodeDrag._generatePosition;

	$nodeDrag._generatePosition = function(ev) {
		var pos = me._$node.data("draggable").oldGeneratePosition(ev);
		return me.centerGridPosition(pos);
	}
	
	this.makeEditable(this._$pos, this._EMPTY_POS, 10);
	
	this.updateCaseVisual();
	this.updateThetaVisual();
	
	return node;
}

BasicNode.prototype.centerGridPosition = function(pos) {
	/* Obtain a position so that the center of the node is on
		a 10 x 10 grid. */

	centerLeft = pos.left + (this._$node.outerWidth() / 2);
	pos.left -= offsetTo10s(centerLeft);
	
	centerTop = pos.top + (this._$node.outerHeight() / 2);
	pos.top -= offsetTo10s(centerTop);
	
	return pos;
}

BasicNode.prototype.getDimensions = function() {
	return {x: this._$node.outerWidth(), y: this._$node.outerHeight() }
}

BasicNode.prototype.getCanvasRelativeCenter = function() {
	var left = parseInt(this._$node.css("left"));
	var top = parseInt(this._$node.css("top"));
	
	return {x: (left + Math.ceil(this._$node.outerWidth() / 2)),
			y: (top + Math.ceil(this._$node.outerHeight() / 2))};
}

BasicNode.prototype.getTopLeft = function() {
	return {left: parseInt(this._$node.css("left")), 
			top: parseInt(this._$node.css("top"))};
}

BasicNode.prototype.centerOn = function(x, y) {
	var dimensions = this.getDimensions();
	var position = {top: y - dimensions.y / 2, left: x - dimensions.x / 2};
	this._$node.css(this.centerGridPosition(position));
	this.hasMoved();
}

BasicNode.prototype.move = function(left, top) {
	var correct = this.centerGridPosition({top: top, left: left});
	this._$node.css({top: correct.top + "px", left: correct.left + "px"});
	this.hasMoved();
}

BasicNode.prototype.hasMoved = function() {
	this._lastMove = this.getCanvasRelativeCenter();
	
	if(this._pid != undefined) {
		this.updateParentLine();
	}
	
	for(child in this._chids)
		NODES[child].parentMoved();
		
	this.signalModification();
}

BasicNode.prototype.startDragging = function(ev, ui) {
	var me = this;
	var mainCanvas = document.getElementById("mainCanvas");
	var mainCanvasPos = mainCanvas.getBoundingClientRect();	

	if(EDITED != undefined)
		EDITED.stopEditing();

	allSelectedLines("deselectLine");

	//If this node is selected, initiate potential multi-select drag
	if (this.isSelected()){
		allSelectedNodes(function(node) {
			node._$node.data("offset", node._$node.offset());
		});
	} else {
		//Otherwise we want to drag only the current node
		allNodes('deselect');
		this.select();
	}
	this.dragOffset = this._$node.offset();
}

BasicNode.prototype.drag = function(ev, ui) {
	
	this.hasMoved();
	
	var dt = ui.position.top - this.dragOffset.top, dl = ui.position.left - this.dragOffset.left;
	
	//Compute new position for all selected nodes (except current one)
	var maxTop = ui.position.top, maxLeft = ui.position.left;
	var me = this;
	allSelectedNodes(function(currentNode) {
		if(currentNode == me)
			return;
			
		var el = currentNode._$node, off = el.data("offset");
		var newTop = off.top + dt, newLeft = off.left + dl
		el.data("newPos", {top: newTop, left: newLeft});
		
		//Record maximum coordinates among nodes that are being dragged
		if(newTop > maxTop)
			maxTop = newTop;
		if(newLeft > maxLeft)
			maxLeft = newLeft;
	});
	
	//Move everything
	allSelectedNodes(function(currentNode) {
		if(currentNode == me)
			return;
	
		var el = currentNode._$node;
		el.css(el.data("newPos"));
		currentNode.hasMoved();
	});
	
	//Resize the Kinetic stage if some nodes are getting close to going out of bounds
	var h = KinSTAGE.height(), w = KinSTAGE.width();
	if(maxTop + this.getDimensions().y + 5 > h) {
		KinSTAGE.height(h + 300);
	}
	if(maxLeft + this.getDimensions().x + 5 > w) {
		KinSTAGE.width(w + 300);
	}
}

BasicNode.prototype.dblClick = function(e) {
	EDITED = this;
	this.select();
}

BasicNode.prototype.click = function(e){
	e.stopPropagation(); //Prevent the main canvas from receiving the click
	if(EDITED != undefined) {
		if(EDITED != this)
			EDITED.stopEditing();
		else
			return;
	}
	
	if (e.shiftKey == false) {
		/* No shift key: 
			- Deselect everything
			- Select this element if it was not selected, or if
			  it was part of a multi-selection
		*/
		
		//Deselect lines
		allSelectedLines("deselectLine");
			
		KinSTAGE.draw();
		
		var numSel = 0;
		allSelectedNodes(function(n) { numSel++; });
		
		var wasSelected = this.isSelected();
	
		allNodes('deselect');
		if (!wasSelected || numSel > 1)
			this.startSelecting();
	} else {
		/* Shift key: Toggle selected on this element only */
		this.toggle();
	}
	
	$( "#mainCanvas" ).data("selectable")._mouseStop(null);
}

BasicNode.prototype.startSelecting = function() {
	this._$node.addClass("ui-selecting");
}

BasicNode.prototype.select = function() {
	if(!this._$node.hasClass("ui-selected"))
		this._$node.addClass("ui-selected");
}

BasicNode.prototype.deselect = function() {
	if(this._$node.hasClass("ui-selected"))
		this._$node.removeClass("ui-selected");
}

BasicNode.prototype.isSelected = function() {
	return this._$node.hasClass("ui-selected");
}

BasicNode.prototype.toggle = function () {
	if (this._$node.hasClass("ui-selected")) {
		this._$node.removeClass("ui-selected");
	}
	else {
		this._$node.addClass("ui-selecting");
	}
}

BasicNode.prototype.remove = function() {
	delete NODES[this.id];
	this._$node.remove();
	
	if(this._pid != undefined) {
		NODES[this._pid].removeChild(this.id);
		
		this._lineToParent.destroy();
		KinSTAGE.draw();
	}
	
	for(child in this._chids) {
		NODES[child].parentRemoved(); //Children signal modification here
	}
	
	this.signalModification();
}

BasicNode.prototype.parentMoved = function() {
	this.updateParentLine();
}

BasicNode.prototype.setParent = function(pid) {
	this._pid = pid;
	var ourCenter = this.getCanvasRelativeCenter();
	var theirCenter = NODES[pid].getCanvasRelativeCenter();
	
	if(this._lineToParent != undefined) 
		this._lineToParent.destroy();
		
	this._lineToParent = new Kinetic.Line({
							points: [middle(ourCenter.x) - this._LINE_WIDTH_PX, 
									middle(ourCenter.y - this.getDimensions().y / 2 - 3), 
									middle(theirCenter.x) - this._LINE_WIDTH_PX, 
									middle(theirCenter.y + NODES[this._pid].getDimensions().y / 2 - 3)],
							stroke: '#000000',
							strokeWidth: this._LINE_WIDTH_PX,
							listening: true,
							id: this.id
						});

	this._lineToParent.on("click", clickLine);

	var me = this;
	//Make a larger line to click on
	this._lineToParent.hitFunc(function(ctx) {
		ctx.beginPath();
		ctx.moveTo(this.getPoints()[0], this.getPoints()[1]);
		ctx.lineTo(this.getPoints()[2], this.getPoints()[3]);
		ctx.closePath();
		var originalWidth = this.getStrokeWidth();
		this.setStrokeWidth(me._LINE_CLICK_WIDTH);
		ctx.fillStrokeShape(this);
		this.setStrokeWidth(originalWidth);
	});

	KinLAYER.add(this._lineToParent);
	KinSTAGE.draw();
	
	this.signalModification();
}

BasicNode.prototype.hasParent = function() {
	return this._pid != undefined;
}

BasicNode.prototype.parentRemoved = function() {
	this._pid = undefined;
	this._lineToParent.destroy();
	this._lineToParent = undefined;
	KinSTAGE.draw();
	
	this.signalModification();
}

BasicNode.prototype.lineSelected = function() {
	return this._lineSelected;
}

BasicNode.prototype.selectLine = function() {
	if(this._lineToParent != undefined) {
		this._lineToParent.stroke("#7FFFD4");
		this._lineSelected = true;
	}
}

BasicNode.prototype.deselectLine = function() {
	if(this._lineToParent != undefined) {
		this._lineToParent.stroke("#000000");
		this._lineSelected = false;
	}
}

BasicNode.prototype.removeLine = function() {
	NODES[this._pid].removeChild(this.id); // Parent signals modification here
	this.parentRemoved(); // We signal modification here
	this._lineSelected = false;
}

BasicNode.prototype.updateParentLine = function() {
	//TODO figure out why we have to correct the y coordinate by 3
	var pts = this._lineToParent.points();
	var theirCenter = NODES[this._pid].getCanvasRelativeCenter();
	var ourCenter = this.getCanvasRelativeCenter();
	pts[0] = middle(ourCenter.x) - this._LINE_WIDTH_PX;
	pts[1] = middle(ourCenter.y - this.getDimensions().y / 2 - 3);
	pts[2] = middle(theirCenter.x) - this._LINE_WIDTH_PX;
	pts[3] = middle(theirCenter.y + NODES[this._pid].getDimensions().y / 2 - 3);
	
	this._lineToParent.points(pts);
	KinSTAGE.draw();
}

BasicNode.prototype.toggleTheta = function() {
	this._theta = !this._theta;
	this.updateThetaVisual();
	this.signalModification();
}

BasicNode.prototype.updateThetaVisual = function() {
	if(this._theta) {
		this._$theta[0].innerHTML = "\u03B8";
	} else {
		this._$theta[0].innerHTML = "";
	}
	
	this._$theta.css("margin-left", (this._theta ? "5px" : "0px"));
	this.hasMoved();
}

BasicNode.prototype.toggleCase = function() {
	this._case = !this._case;
	this.updateCaseVisual();
	this.signalModification();
}

BasicNode.prototype.updateCaseVisual = function() {
	if(this._case) {
		this._$case[0].innerHTML = "\u03F0";
	} else {
		this._$case[0].innerHTML = "";
	}
	
	this._$case.css("margin-left", (this._case ? "3px" : "0px"));
	this.hasMoved();
}

BasicNode.prototype.signalModification = function() {
	if(SAVER != undefined)
		SAVER.signalModification(this.id);
}

BasicNode.prototype.edit = function(ev, ed) {
	if(ed.val().length == 0)
		ed.css("width", this._EDIT_MIN_WIDTH + "px");
	
	var me = this;
	var oldCenter = this._lastMove;
	ed.autoGrowInput({
		/* A nonzero comfortZone will cause problems because the node 
		will have different widths when edited and not edited. */
		comfortZone: 0, 
		minWidth: me._EDIT_MIN_WIDTH,
		callback: function() {
			me.centerOn(oldCenter.x, oldCenter.y);
		}
	});
	
	ed.select(); //Obtain immediate keyboard focus on the editor
}

BasicNode.prototype.makeEditable = function($elem, empty, length) {
	var me = this;
	$elem.addClass("editable");
	$elem.editable({
		toggleFontSize: false,
		closeOnEnter: true,
		emptyMessage: empty,
		maxLength: length,
		callback: function(data) {
			EDITED = undefined;
			me.signalModification();
		}
	}).dblclick(function(e) { me.dblClick.call(me, e); })
	.data('id', this.id)
	.on('edit', function(ev, ed) {
		me._oldCenter = me.getCanvasRelativeCenter();
		me.edit.call(me, ev, ed);
	});
}

BasicNode.prototype.isLeaf = function() {
	for(child in this._chids)
		return false;
		
	return true;
}

//TODO Refactor those two functions
BasicNode.prototype.extremeLeft = function(offset) {
	if(this.isLeaf())
		return Math.abs(offset - this.getDimensions().x / 2);
	
	var minOffset = undefined;
	var minChild;
	for(child in this._chids) {
		if(minOffset == undefined || NODES[child]._xOffset < minOffset) {
			minOffset = NODES[child]._xOffset;
			minChild = child;
		}
	}
	
	return NODES[minChild].extremeLeft(offset + minOffset);
}

BasicNode.prototype.extremeRight = function(offset) {
	if(this.isLeaf())
		return offset + this.getDimensions().x / 2;
	
	var maxOffset = undefined;
	var maxChild;
	for(child in this._chids) {
		if(maxOffset == undefined || NODES[child]._xOffset > maxOffset) {
			maxOffset = NODES[child]._xOffset;
			maxChild = child;
		}
	}
	
	return NODES[maxChild].extremeRight(offset + maxOffset);
}

BasicNode.prototype.subtreeWidth = function() {
	return this.extremeRight(0) + this.extremeLeft(0);
}

BasicNode.prototype.prettify = function(idOrder) {
	if(this.isLeaf())
		this._xOffset = 0;
	else {
		for(child in this._chids)
			NODES[child].prettify();
			
		var shift = 0;
		var numChildren = 0;
		var orderedChildren = [];
		for(child in this._chids) {
			numChildren++;
			orderedChildren.push(child);
		}
		
		if(idOrder) 
			orderedChildren.sort();
		else
			orderedChildren.sort(function(a, b) {
				var aX = NODES[a].getCanvasRelativeCenter().x;
				var bX = NODES[b].getCanvasRelativeCenter().x;
				return aX - bX;
			});
			
		var i = Math.floor(numChildren / 2) - 1;
		var j = i + 1;
		
		if(numChildren % 2 == 1) { //Account for the central element (which has no shift)
			var cntr = orderedChildren[i + 1];
			shift = Math.max(NODES[cntr].extremeRight(0), NODES[cntr].extremeLeft(0));
			j++;
		}
		
		while(i >= 0) {
			var iCh = orderedChildren[i], jCh = orderedChildren[j];
			var displacement = Math.max(NODES[iCh].extremeRight(0), NODES[jCh].extremeLeft(0));
			displacement += shift + this._MIN_NODE_DISTANCE;
			shift += Math.max(NODES[iCh].subtreeWidth(), NODES[jCh].subtreeWidth()) + this._MIN_NODE_DISTANCE;
			
			
			NODES[iCh]._xOffset = Math.round(-displacement);
			NODES[jCh]._xOffset = Math.round(displacement);
			i--;
			j++;
		}
	}
}

BasicNode.prototype.prettyPosition = function(root) {
	if(!root) {
		var parentPos = NODES[this._pid].getCanvasRelativeCenter();
		var dimensions = this.getDimensions();
		var x = parentPos.x - dimensions.x / 2 + this._xOffset;
		var y = parentPos.y + NODES[this._pid].getDimensions().y / 2 + this._NODE_VERTICAL_SPACE;
		this.move(x, y);
	} else {
		//If the tree would end up outside of the canvas area, move it
		var currentLeft = parseInt(this._$node.css("left"));
		var leftBoundary = this.extremeLeft(0);
		var outside = currentLeft - leftBoundary;
		if(outside < 0) {
			this.move(currentLeft - outside, parseInt(this._$node.css("top")));
		}
	}
	
	for(chid in this._chids)
		NODES[chid].prettyPosition(false);
}
